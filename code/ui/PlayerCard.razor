@using System;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using Facepunch.BombRoyale;

@namespace Facepunch.BombRoyale.UI
@inherits Panel

<div class="container p@(PlayerIndex) @(!IsValidPlayer() ? "empty" : "") @(IsDead() ? "dead" : "")">
    <label class="name">@GetPlayerName()</label>
    <label class="index">P@(PlayerIndex)</label>

    <div class="avatar">
        <div class="inner"></div>
        <div class="head"></div>
		
        @if ( IsDead() )
        {
            <div class="dead"></div>
        }
    </div>

    <div class="lives">
		@for ( var i = 0; i < GetLivesLeft(); i++ )
		{
			@:<div class="life"><div>
		}
    </div>

    <div class="pickups">
        <div class="pickup bombs @(HasBombDisease() ? "diseased" : "")">
            <div class="icon"></div>
            <label class="label">@GetBombsLeft()</label>
        </div>

        <div class="pickup range @(HasRangeDisease() ? "diseased" : "")">
            <div class="icon"></div>
            <label class="label">@GetBombRange()</label>
        </div>

        <div class="pickup speed @(HasSpeedDisease() ? "diseased" : "")">
            <div class="icon"></div>
            <label class="label">@GetSpeedBoosts()</label>
        </div>
		
        @if ( HasSuperBomb() )
        {
            @:<div class="superbomb"><div>
        }
    </div>
</div>

@code
{
    //public BombRoyalePlayer Player => Client?.Pawn as BombRoyalePlayer;
    public int PlayerIndex { get; set; }

    protected override int BuildHash()
    {
		/*
        if ( Player.IsValid() )
            return HashCode.Combine( Player, Player.LifeState, Player.LivesLeft, Player.HasSuperBomb, Player.BombRange, Player.GetBombsLeft(), Player.SpeedBoosts, Player.Disease );
        else if ( Client.IsValid() )
            return HashCode.Combine( Client, Client.Name );
		*/
		
        return 0;
    }

    private bool HasRangeDisease() => false;//Player.IsValid() && Player.Disease == DiseaseType.LowRange;
    private bool HasSpeedDisease() => HasFastDisease() || HasSlowDisease();
    private bool HasFastDisease() => false;//Player.IsValid() && Player.Disease == DiseaseType.MoveFast;
    private bool HasSlowDisease() => false;//Player.IsValid() && Player.Disease == DiseaseType.MoveSlow;
    private bool HasBombDisease() => false;//Player.IsValid() && Player.Disease == DiseaseType.RandomBomb;

    private string GetBombsLeft() => "0";
	private int GetLivesLeft() => 0;
	private bool IsValidPlayer() => false;
	private bool HasSuperBomb() => false;
	private string GetPlayerName() => "Player";
	private bool IsDead() => true;

    private string GetBombRange()
    {
        if ( HasBombDisease() ) return "1";
        //return (Player?.BombRange ?? 0).ToString();
		return "0";
    }

    private string GetSpeedBoosts()
    {
        if ( HasFastDisease() ) return "8";
        if ( HasSlowDisease() ) return "0";
        //return (Player?.SpeedBoosts ?? 0).ToString();
		return "0";
    }
}
